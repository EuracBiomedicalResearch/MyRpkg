---
title: "Saliva Genetics families and households"
author: "Giacomo Antonello"
date: "03/12/2021"
output: html_document
---
# useful references found along the way

```{r}

# https://journals.asm.org/doi/10.1128/mBio.01237-17

# salivary microbiome very explained by household: also, genetics explain very little, plus it seems to persist after stopping living together.


```

# Libraries

```{r, message=FALSE, warning=FALSE}

library(tidyverse, quiet = TRUE, verbose = FALSE)
library(microbiome)

library(phyloseq)

# my functions
source("~/personal R projects/my_personal_functions.R")

```

# Introduction

This document is meant to provide some infographics of the CHRISMB family status starting from the pedigree. Once we discover how many families we have and how they separate by households, we can study the microbiome based on that.

## read pedgree and microbiome data

```{r}

# pedigree
CHRISMB_pedigree_extended <- read.csv("~/CHRISMB/saliva_genetics/heritability/SOLAR_heritability/heritability_directory_setups/pedigree/pedigree_SOLAR_house_location.ped", colClasses = "character")

# sample names
library(phyloseq)

chrismb_phy <-  readRDS("~/CHRISMB/Microbiome_data/05_chrismb_ONLY_NewBatch_11_2021.rds")
chrismb_phy_core <- microbiome::core(chrismb_phy, detection = 10, prevalence = 1/nsamples(chrismb_phy))

chrismb_aids <- readRDS("~/CHRISMB/Microbiome_data/05_chrismb_ONLY_NewBatch_11_2021.rds") %>% 
  meta() %>% 
  .$aid_chris

```

## generate family id - attempt 1

The function is taken from `kinship2` package, which connects the individuals. unfortunately, the function goes all the way up, which means that for a fully connected pedigree we will get 1 single family. I would propose to split families from the 4th generation on, because the genetic background after that gets quite low, since you halve your genetic background every generation, you should have no more than $\frac{1}{(2^4)}=\frac{1}{16}$ of your grand-grand-grandpa's genes.

OR: we restrict to the CHRISMB individuals, the only ones we have microbiome data on

```{r}

# library(kinship2)

# 1 - subset CHRISMB only participants
CHRISMB_only_pedigree <- filter(CHRISMB_pedigree_extended, id %in% chrismb_aids)
# fix the HHID = "" problems
CHRISMB_only_pedigree$HHID <- ifelse(CHRISMB_only_pedigree$HHID == "", "unknown", CHRISMB_only_pedigree$HHID)
CHRISMB_only_pedigree$HHID <- ifelse(CHRISMB_only_pedigree$HHID == "unknown", make.unique(CHRISMB_only_pedigree$HHID), CHRISMB_only_pedigree$HHID)

# 2 - make family name
CHRISMB_only_pedigree$fam <- as.character(kinship2::makefamid(id = CHRISMB_only_pedigree$id, mother.id = CHRISMB_only_pedigree$mo, father.id = CHRISMB_only_pedigree$fa))
# 2.1 - fix the 0 problem, that are singletons. rename them as unique
CHRISMB_only_pedigree$fam <- ifelse(CHRISMB_only_pedigree$fam == "0", make.unique(CHRISMB_only_pedigree$fam),CHRISMB_only_pedigree$fam) 

# 3 - fix parents in "id", only necessary if you want to plot. NB: don't do this before step 2, because the resulting family will be fully "artificially" connected
# CHRISMB_only_pedigree_fixed <- kinship2::fixParents(id = CHRISMB_only_pedigree$id, dadid = CHRISMB_only_pedigree$fa, momid = CHRISMB_only_pedigree$mo, sex = as.integer(CHRISMB_only_pedigree$sex)) 
# important: so far i didn't make it work...


## EXTRA: Add pedigree to metadata

CHRISMB_only_pedigree <- mutate(CHRISMB_only_pedigree, 
                                HHID_fam = paste(HHID,fam, sep = "_"),
                                aid_chris = id)


chrismb_phy_core_ped <- add_meta_variables(physeq = chrismb_phy_core, df = select(CHRISMB_only_pedigree, -sex), by = "aid_chris")

## subset only those samples you are interested in, that are non-missing ones and those not taking antibiotics

chrismb_phy_core_ped_selected_samples <- drop_NA_from_phyloseq_vars(chrismb_phy_core_ped, c("HHID", "fam", "how_many_teeth", "smoking_exposure_ga")) %>% subset_samples(used_antibiotics_last_3_months == "no")

```

## Individuals per family

```{r}

n_indiv_not_in_fam <-
CHRISMB_only_pedigree %>% 
  group_by(fam) %>% 
  tally() %>% 
  filter(n == 1) %>% 
  nrow()


n_indiv_in_fam <- CHRISMB_only_pedigree %>% 
  group_by(fam) %>% 
  tally() %>% 
  filter(n != 1) %>% 
  nrow()

CHRISMB_only_pedigree %>% 
  group_by(fam) %>% 
  tally() %>% 
  filter(n != 1) %>% 
  ggplot(aes(x = reorder(fam, -n), y = n))+ geom_bar(stat = "identity")+ 
  labs(title = "N° memebers per family code",
       subtitle = paste("N =", n_indiv_in_fam),
       caption = paste("N° individuals not assigned to any family:", n_indiv_not_in_fam))+ 
  theme_light()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```


## unassigned family code

These are the ones that did not generate a family. This is mostly because in the CHRISMB subset those IDs did not have any relevant member. This is not too relevant because these cases are when you need further build up than one generation to join participants into a family (eg: id 001... and 001... declare having same parents, who will be called 900..., but the latters' parents will have to appear as 900 in the "id" column, and this will be removed by subsetting only CHRISMB participants). In practice it is very unlikely to have any trace of 2nd generation effect on the salivary microbiome of this population. furthermore, diets have changed a lot historically. So the closest family assignments that could be missing with this definition are uncles/aunts and cousins.

```{r}
# filter(CHRISMB_only_pedigree, grepl("^0\\.", fam)) %>% .$HHID %>% table()
```

## how many individuals per household?

Maximum 8, not bad

```{r}
par(mfrow=c(1,2))

table(CHRISMB_only_pedigree$HHID) %>% 
  sort(decreasing = TRUE) %>% 
  hist(las = 2, main = "Indiv. per household")

table(CHRISMB_only_pedigree$HHID) %>% 
  sort(decreasing = TRUE) %>% 
  hist(main = "distribution of N° individuals\nper household")

```
The majority of people appear to be living alone. Weird, but probably it is a GPS approximation, or not many co-inhabitants participated in the study.

## how many indiv. per family?

```{r}

table(CHRISMB_only_pedigree$fam) %>% 
  sort(decreasing = TRUE) %>% 
  hist(main = "distribution of N°\n individuals per family")

```

A similar situation as before. Assuming these definitions are correct, and they mostly should, it means that there is a block of people who participated that are "very adult" and providing the names of their parents, these did not participate, putting them as single-familied. An option to compensate for this phenomenon would be to look 2 generations ahead of the participant and see how they are related, but I don't know how to do that (10-01-2022).


```{r, warning=FALSE}
dir.create("output_family_household")
png("output_family_household/00_distrib_family_households.png", height = 6, width = 12, units = "in", res = 300)
par(mfrow = c(1,2))
table(CHRISMB_only_pedigree$HHID) %>% 
  sort(decreasing = TRUE) %>% 
  hist(main = "distribution of N° individuals\nper household")
table(CHRISMB_only_pedigree$fam) %>% 
  sort(decreasing = TRUE) %>% 
  hist(main = "distribution of N° individuals\nper family")

dev.off()
```

## how many families per household?

```{r create HHID/fam dataset}

house_n_families_and_individuals <- filter(CHRISMB_only_pedigree, !grepl("^0\\.|$)", fam)) %>% # remove all households being 0, not too informative in family/house effects..?
  group_by(HHID) %>% 
  summarise(HHID = HHID,
            n_families = dplyr::n_distinct(fam),
            n_individuals = n()
            ) %>% 
  ungroup() %>% 
  distinct()

house_n_families_and_individuals
```

Cases where more families inside the same HHID. Luckily, they are not extreme cases, like 30 people living in the same condominium. More importantly, there are also cases of people living together but not being in the same family. These are probably couples or new-weds, or coeds, whatever, but for the household effect this might actually be useful.


``` {r}
filter(house_n_families_and_individuals, n_families >1) %>% 
  arrange(-n_individuals)

```
## HHID 5023 - insight

```{r}

ids <- CHRISMB_only_pedigree %>% filter(HHID == "5023") %>% .$id

HHID5023_pedigree <- CHRISMB_only_pedigree %>% filter(HHID == "5023") %>% 
  dplyr::select(-aid_chris) %>% 
  dplyr::rename(aid_chris = id)

age_sex_municip <- readRDS("~/CHRISMB/Microbiome_data/05_chrismb_ONLY_NewBatch_11_2021.rds") %>% 
  microbiome::meta() %>% 
  filter(aid_chris %in% ids)

merge(age_sex_municip, select(HHID5023_pedigree, -sex, -HHID), by = "aid_chris") %>% 
  select(aid_chris, age,sex,how_many_teeth, smoking_exposure_ga, fam, municipality) %>% kableExtra::kbl() %>% 
  kableExtra::kable_styling(bootstrap_options = "striped")

```

## HHID 4 - insight

even in this cluster there is a group of people living in GRAUN... maybe in that town the GPS is not accurate? or people live in satellite houses after their parents?

```{r}

ids <- CHRISMB_only_pedigree %>% filter(HHID == "4") %>% .$id

HHID4_pedigree <- CHRISMB_only_pedigree %>% filter(HHID == "4") %>% 
  dplyr::select(-aid_chris) %>% 
  dplyr::rename(aid_chris = id)

age_sex_municip <- readRDS("~/CHRISMB/Microbiome_data/05_chrismb_ONLY_NewBatch_11_2021.rds") %>% 
  microbiome::meta() %>% 
  filter(aid_chris %in% ids)

# final table useful to get an idea
merge(age_sex_municip, select(HHID4_pedigree, -HHID), by = "aid_chris") %>% 
  select(aid_michigan, age,sex,how_many_teeth, smoking_exposure_ga, fam, municipality) %>% kableExtra::kbl() %>% 
  kableExtra::kable_styling(bootstrap_options = "striped")

# dissimilarity matrix of this household(s?) alone, could be of use?
aids <- merge(age_sex_municip, select(HHID4_pedigree, -HHID), by = "aid_chris") %>% .$aid_michigan 

# bray curtis distance matrix will be calculated below
kableExtra::kbl(as.matrix(distance_for_all_bray)[rownames(as.matrix(distance_for_all_bray)) %in% aids,colnames(as.matrix(distance_for_all_bray)) %in% aids])

```


# 1 - Households only, between and within

```{r}

CHRISMB_only_pedigree <- mutate(CHRISMB_only_pedigree, 
                                HHID_fam = paste(HHID,fam, sep = "_"),
                                aid_chris = id,
                                sex = NULL)


# less filtered phyloseq 

chrismb_phy_ped <- add_meta_variables(physeq = chrismb_phy, df = select(CHRISMB_only_pedigree, -fa, -mo, -id), by = "aid_chris")

## subset only those samples you are interested in, that are non-missing ones and those not taking antibiotics

chrismb_phy_ped_selected_samples <- drop_NA_from_phyloseq_vars(chrismb_phy_ped, c("HHID", "fam", "how_many_teeth", "smoking_exposure_ga", "municipality")) %>% subset_samples(used_antibiotics_last_3_months == "no")

chrismb_phy_ped_selected_samples
# filtered phyloseq
chrismb_phy_core_ped_selected_samples <- core(chrismb_phy_ped_selected_samples, 
                                              detection = 10,
                                              prevalence = 1/nsamples(chrismb_phy_ped_selected_samples))
```

# 1 bis - calculate beta diversities for all

```{r}

# calculate generic distances to be used throughout the script
distance_for_all_jaccard <- phyloseq::distance(microbiome::transform(chrismb_phy_core, "compositional"), method = "jaccard")

distance_for_all_bray <- phyloseq::distance(microbiome::transform(chrismb_phy_core, "compositional"), method = "bray")

distance_for_all_jaccard_val_vec <- dist_upper(distance_for_all_jaccard) %>% unlist()
distance_for_all_bray_val_vec <- dist_upper(distance_for_all_bray) %>% unlist()


{
  plot(x = distance_for_all_jaccard_val_vec, 
       y = distance_for_all_bray_val_vec, 
       xlab = "Jaccard",
       ylab = "Bray-Curtis", 
       main= "correlation of distance metrics",
      pch =16)
  abline(a = 0, b = 1, col = "red")
}

```

Conclusion from distance metrics: Jaccard tends to find lower distance values than bray-curtis. also, the values inflate at higher digrees of similarity, meaning that abundance plays a bigger role in distancing samples at lower degrees of similarity. 

Participants can be compared under three aspects:

  * presence/absence of a specific taxon - Jaccard
  * presence AND relative abundance - Bray-Curtis
  * presence/absence of phylogenetically related taxa - Unifrac
  * presence/absence AND abundance of phylogenetically related taxa - Weighted Unifrac

Each distance answers a specific question, so we should think carefully what is our goal. In principle all questions are legit, for example strain (~ASV) sharing could be more or less phylogenetically distant. this would be answered putting Jaccard and Unifrac distances close to one another.

If we were wondering if abundances would play a role (maybe diets shape abundances of the same ASV across households), then we could study the role of abundance of these ASVs.


## 1.1 - only HHID (>= 2 members per house)

### 1.1.1 - stricter filter

#### Boxplots

```{r}
n_members <- 2


chrismb_phy_core_ped_selected_samples <- drop_NA_from_phyloseq_vars(chrismb_phy_core_ped, c("HHID", "fam", "how_many_teeth", "smoking_exposure_ga", "municipality")) %>% subset_samples(used_antibiotics_last_3_months == "no")

HHID_useful <- chrismb_phy_core_ped_selected_samples %>% meta() %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= n_members) %>% 
  .$HHID

# get samples only for cases where there are at least 2 individuals per household
chrismb_phy_core_ped_selected_samples_usefulHHID <- subset_samples(chrismb_phy_core_ped_selected_samples, HHID %in% HHID_useful)

# prune all-0 taxa
chrismb_phy_core_ped_selected_samples_usefulHHID <- subset_taxa(chrismb_phy_core_ped_selected_samples_usefulHHID, taxa_sums(chrismb_phy_core_ped_selected_samples_usefulHHID) > 0)


# calculate beta diversity matrix

beta_divs_lists_strictFilter <- beta_div_betw_withn(physeq = chrismb_phy_core_ped_selected_samples_usefulHHID,
                                       dist = distance_for_all, 
                                       variab = "HHID")


wrangled_data_betadiv_strictFilter <- data.frame(values = c(unlist(beta_divs_lists_strictFilter$within),unlist(beta_divs_lists_strictFilter$between)),
           comparison = c(rep("within household", length(unlist(beta_divs_lists_strictFilter$within))), rep("between household", length(unlist(beta_divs_lists_strictFilter$between)))))

strictFilter_boxplots4plus <- ggplot(wrangled_data_betadiv_strictFilter, aes(x = comparison, y = values))+ geom_boxplot()+theme_light()+ggtitle(paste("Only with >=", n_members,"members per household")) +labs(caption = paste("N households =", length(HHID_useful),"; N taxa:", ntaxa(chrismb_phy_core_ped_selected_samples_usefulHHID), "; N samples:", nsamples(chrismb_phy_core_ped_selected_samples_usefulHHID)))+
  xlab("")+ ylab("Beta diversity metric (Jaccard)")

strictFilter_boxplots4plus

```

#### PCoA

```{r}

HHID_useful <- chrismb_phy_core_ped_selected_samples %>% meta() %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= 4) %>% 
  .$HHID

# get samples only for cases where there are at least 2 individuals per household
chrismb_phy_core_ped_selected_samples_usefulHHID <- subset_samples(chrismb_phy_core_ped_selected_samples, HHID %in% HHID_useful)

# prune all-0 taxa
chrismb_phy_core_ped_selected_samples_usefulHHID <- subset_taxa(chrismb_phy_core_ped_selected_samples_usefulHHID, taxa_sums(chrismb_phy_core_ped_selected_samples_usefulHHID) > 0)

ord <- ordinate(chrismb_phy_core_ped_selected_samples_usefulHHID, method = "PCoA",distance = "jaccard")

p <- plot_ordination(physeq = chrismb_phy_core_ped_selected_samples_usefulHHID,
                     ordination = ord,type = "samples",color = "HHID",title = "Households with >= 4 people")


p2<- p + #stat_ellipse(aes(group=HHID, color = HHID), show.legend = FALSE)+
  theme_light()+ ggforce::geom_mark_hull(aes(fill = HHID), radius = 0, alpha = 0.2)

p2

```

### 1.1.2 - loose filter

```{r}
n_members <- 2

HHID_useful <- chrismb_phy_ped_selected_samples %>% meta() %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= n_members) %>% 
  .$HHID

# get samples only for cases where there are at least 2 individuals per household
chrismb_phy_ped_selected_samples_usefulHHID <- subset_samples(chrismb_phy_ped_selected_samples, HHID %in% HHID_useful)

# prune all-0 taxa
chrismb_phy_ped_selected_samples_usefulHHID <- subset_taxa(chrismb_phy_ped_selected_samples_usefulHHID, taxa_sums(chrismb_phy_ped_selected_samples_usefulHHID) > 0)


# calculate beta diversity matrix

beta_divs_lists_looseFilter <- beta_div_betw_withn(physeq = chrismb_phy_ped_selected_samples_usefulHHID,
                                       dist = "jaccard", 
                                       variab = "HHID")


wrangled_data_betadiv_looseFilter <- data.frame(values = c(unlist(beta_divs_lists_looseFilter$within),unlist(beta_divs_lists_looseFilter$between)),
           comparison = c(rep("within household", length(unlist(beta_divs_lists_looseFilter$within))), rep("between household", length(unlist(beta_divs_lists_looseFilter$between)))))

looseFilter_boxplots4plus <- ggplot(wrangled_data_betadiv_looseFilter, aes(x = comparison, y = values))+ geom_boxplot()+theme_light()+ggtitle(paste("Only with >=", n_members,"members per household")) +labs(caption = paste("N households =", length(HHID_useful),"; N taxa:", ntaxa(chrismb_phy_ped_selected_samples_usefulHHID), "; N samples:", nsamples(chrismb_phy_ped_selected_samples_usefulHHID)))+
  xlab("")+ ylab("Beta diversity metric (Jaccard)")

looseFilter_boxplots4plus

```

## 1.2 - final plots together
```{r, fig.height=6, fig.width=8}
library(ggpubr)
plot <- ggarrange(strictFilter_boxplots4plus+
                    labs(title = "", 
                         subtitle = "stricter taxa filtering"
                         ),
                  
                  looseFilter_boxplots4plus+
                    labs(title = "", 
                         subtitle = "generous taxa filtering"
                         )+
                    ylab("")
                  ) %>% 
  annotate_figure(top = text_grob(label = "INTER- and INTRA- household pariwise diversities", face = "bold", color = "darkred", size = 16))

ggsave(plot = plot, 
       filename = "output_family_household/04_HHID_only_betaBoxplots.png", 
       height = 6, 
       width = 8, 
       dpi = 300)

open.plot.directory("output_family_household/04_HHID_only_betaBoxplots.png")
```

## 1.3 - Age stratified, Loose filter

### 1.3.1 - only cohabiting couples

```{r}

if(!("distance_for_all_bray" %in% ls())){
distance_for_all_bray <- distance(microbiome::transform(chrismb_phy_core_ped_selected_samples, "compositional"), "bray")
}

n_members <- 2

tallied_house <- chrismb_phy_core_ped_selected_samples %>% 
      meta() %>% 
      group_by(HHID) %>% 
      tally()

HHID_duplets <- filter(tallied_house, n == n_members)

phy_age_strat_useful_HHID_list <- list()

for(age_gr in levels(factor(chrismb_phy_core_ped_selected_samples@sam_data$age_cat))){
  
    tmp <- chrismb_phy_core_ped_selected_samples %>%
      meta() %>%
      filter(age_cat == age_gr)
      
    HHID_useful <- intersect(tmp$HHID, HHID_duplets$HHID)
    
    
  phy_age_strat_useful_HHID_list[[age_gr]] <- tryCatch(expr = {subset_samples(chrismb_phy_core_ped_selected_samples, HHID %in% HHID_useful) %>% subset_samples(age_cat == age_gr)}, error = function(e) {return("empty")})
}

## after getting the useful phyloseq objects, summarise by age group
cat("N° samples per age category of people living at least with another person in their age range")
sample_size_map <- sapply(phy_age_strat_useful_HHID_list, nsamples) %>% data.frame() %>% 
  rownames_to_column("age_cat") %>% 
  set_names(c("age_cat", "n_samples")) %>% 
  mutate(full_name = paste0(age_cat, " (n=", n_samples, ")"))

# calculate within and between diversities

betadivs_separated_age <- lapply(phy_age_strat_useful_HHID_list, beta_div_betw_withn, dist = distance_for_all_bray, variab= "HHID", verbose = TRUE, btwn_pairwise = FALSE)

plot_age_strat_beta_within_betweenHHID <- lapply(betadivs_separated_age, bind_rows, .id = "comparison") %>% bind_rows(.id = "age_cat") %>% 
  select(-HHID) %>% 
  merge(., sample_size_map, by = "age_cat", sort = FALSE) %>% 
  ggplot(aes(x = full_name, fill = comparison, y = value))+
  geom_violin(alpha = 0.5)+
  geom_boxplot(width = 0.4, show.legend = FALSE)+ 
  scale_fill_manual(name = "Beta Comparison", labels = c("Between", "Within"), values = ggsci::pal_futurama()(3)[c(1,3)])+
  xlab("Age category")+ 
  ylab("Bray-Curtis dissimilarity")+
  theme_light()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ 
  labs(title = "Diversity of people by age",
       caption = paste0("only households with ", n_members, " members"))

plot_age_strat_beta_within_betweenHHID

```

## 1.4 - N° teeth stratified, Loose filter

### 1.4.1 - only cohabiting couples

```{r}

if(!("distance_for_all_bray" %in% ls())){
distance_for_all_bray <- distance(microbiome::transform(chrismb_phy_core_ped_selected_samples, "compositional"), "bray")
}

n_members <- 2

tallied_house <- chrismb_phy_core_ped_selected_samples %>% 
      meta() %>% 
      group_by(HHID) %>% 
      tally()

HHID_duplets <- filter(tallied_house, n == n_members)

phy_teeth_strat_useful_HHID_list <- list()

for(teeth_gr in levels(factor(chrismb_phy_core_ped_selected_samples@sam_data$how_many_teeth))){
  
    tmp <- chrismb_phy_core_ped_selected_samples %>%
      meta() %>%
      filter(how_many_teeth == teeth_gr)
      
    HHID_useful <- intersect(tmp$HHID, HHID_duplets$HHID)
    
    
  phy_teeth_strat_useful_HHID_list[[teeth_gr]] <- tryCatch(expr = {subset_samples(chrismb_phy_core_ped_selected_samples, HHID %in% HHID_useful) %>% subset_samples(how_many_teeth == teeth_gr)}, error = function(e) {return("empty")})
}

## after getting the useful phyloseq objects, summarise by teeth group
cat("N° samples per teeth category of people living at least with another person in their teeth range")
sample_size_map <- sapply(phy_teeth_strat_useful_HHID_list, nsamples) %>% data.frame() %>% 
  rownames_to_column("how_many_teeth") %>% 
  set_names(c("how_many_teeth", "n_samples")) %>% 
  mutate(full_name = paste0(how_many_teeth, " (n=", n_samples, ")"))

# calculate within and between diversities

betadivs_separated_teeth <- lapply(phy_teeth_strat_useful_HHID_list, beta_div_betw_withn, dist = distance_for_all_bray, variab= "HHID", verbose = TRUE, btwn_pairwise = FALSE)

plot_teeth_strat_beta_within_betweenHHID <- lapply(betadivs_separated_teeth, bind_rows, .id = "comparison") %>% bind_rows(.id = "how_many_teeth") %>% 
  select(-HHID) %>% 
  merge(., sample_size_map, by = "how_many_teeth", sort = FALSE) %>% 
  ggplot(aes(x = full_name, fill = comparison, y = value))+
  geom_violin(alpha = 0.5)+
  geom_boxplot(width = 0.4, show.legend = FALSE)+ 
  scale_fill_manual(name = "Beta Comparison", labels = c("Between", "Within"), values = ggsci::pal_futurama()(3)[c(1,3)])+
  xlab("N° Teeth")+ 
  ylab("Bray-Curtis dissimilarity")+
  theme_light()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ 
  labs(title = "Diversity of people by teeth",
       caption = paste0("only households with ", n_members, " members"))

plot_teeth_strat_beta_within_betweenHHID

```


## 1.5 - Smoking stratified, Loose filter

### 1.5.1 - Only cohabiting couples

```{r}

if(!("distance_for_all_bray" %in% ls())){
distance_for_all_bray <- distance(microbiome::transform(chrismb_phy_core_ped_selected_samples, "compositional"), "bray")
}

n_members <- 2

tallied_house <- chrismb_phy_core_ped_selected_samples %>% 
      meta() %>% 
      group_by(HHID) %>% 
      tally()

HHID_duplets <- filter(tallied_house, n == n_members)

phy_age_strat_useful_HHID_list <- list()

for(smoking_gr in levels(factor(chrismb_phy_core_ped_selected_samples@sam_data$smoking_exposure_ga))){
  
    tmp <- chrismb_phy_core_ped_selected_samples %>%
      meta() %>%
      filter(smoking_exposure_ga == smoking_gr)
      
    HHID_useful <- intersect(tmp$HHID, HHID_duplets$HHID)
    
    
  phy_age_strat_useful_HHID_list[[smoking_gr]] <- tryCatch(expr = {subset_samples(chrismb_phy_core_ped_selected_samples, HHID %in% HHID_useful) %>% subset_samples(smoking_exposure_ga == smoking_gr)}, error = function(e) {return("empty")})
}

## after getting the useful phyloseq objects, summarise by age group
cat("N° samples per age category of people living at least with another person in their age range")
sample_size_map <- sapply(phy_age_strat_useful_HHID_list, nsamples) %>% data.frame() %>% 
  rownames_to_column("smoking_exposure_ga") %>% 
  set_names(c("smoking_exposure_ga", "n_samples")) %>% 
  mutate(full_name = paste0(smoking_exposure_ga, " (n=", n_samples, ")"))

# calculate within and between diversities

betadivs_separated_age <- lapply(phy_age_strat_useful_HHID_list, beta_div_betw_withn, dist = distance_for_all_bray, variab= "HHID", verbose = TRUE, btwn_pairwise = FALSE)

plot_age_strat_beta_within_betweenHHID <- lapply(betadivs_separated_age, bind_rows, .id = "comparison") %>% bind_rows(.id = "smoking_exposure_ga") %>% 
  select(-HHID) %>% 
  merge(., sample_size_map, by = "smoking_exposure_ga", sort = FALSE) %>% 
  ggplot(aes(x = full_name, fill = comparison, y = value))+
  geom_violin(alpha = 0.5)+
  geom_boxplot(width = 0.4, show.legend = FALSE)+ 
  scale_fill_manual(name = "Beta Comparison", labels = c("Between", "Within"), values = ggsci::pal_futurama()(3)[c(1,3)])+
  xlab("Smoking category")+ 
  ylab("Bray-Curtis dissimilarity")+
  theme_light()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ 
  labs(title = "Diversity of people by age",
       caption = paste0("only households with ", n_members, " members"))

plot_age_strat_beta_within_betweenHHID

```

We could see that, while median values do not show the expected trends, people living together don't show dramatically different microbiota profiles, since outliers are not reported by the boxplot function.

### 1.4.2 - within and between households, parent- child pairs

#### 1.4.2.1 - mother-child 

```{r}
# replace sample names of the distance matrix with CHRIS AIDs
distance_for_all_bray_mtx<- as.matrix(distance_for_all_bray)

aids_map <- read.table("~/CHRISMB/participants lists each study/michigan_chris_mapping.txt", 
                       header = TRUE, 
                       colClasses = "character"
                       ) %>% 
  set_names(c("aid_michigan","aid_chris")) %>% 
  filter(aid_michigan %in% colnames(distance_for_all_bray_mtx))

# match order or column and rownames of the matrix
aids_map <- aids_map[match(aids_map$aid_michigan,colnames(distance_for_all_bray_mtx)),]

#replace column and rownames or the distance matrix
if(identical(aids_map$aid_michigan, colnames(distance_for_all_bray_mtx))){
colnames(distance_for_all_bray_mtx) <- aids_map$aid_chris
rownames(distance_for_all_bray_mtx) <- aids_map$aid_chris
}else{
  stop("matching samples order didn't work")
}

# find child-mother pairs
child_mother_pairs <- child_mother_pairs_ped(CHRISMB_only_pedigree %>% filter(id %in% chrismb_phy_core_ped_selected_samples@sam_data$aid_chris))

## some will probably be missing due to sample selection of the phyloseq object: remove them
child_mother_pairs_effective_samp_size <- child_mother_pairs[child_mother_pairs[,1] %in% colnames(distance_for_all_bray_mtx) & child_mother_pairs[,2] %in% colnames(distance_for_all_bray_mtx),]

dim(child_mother_pairs_effective_samp_size)


# molten beta diversity useful for merging
beta_mtx_molten <- distance_for_all_bray_mtx %>% 
  reshape2::melt(as.is = TRUE, varnames = c("V1", "V2"), value.name = "bray_value")

# add household of column one and column two 
wrangled_beta_values_mo_child_pairs <- as.data.frame(child_mother_pairs_effective_samp_size) %>% 
  merge(., meta(chrismb_phy_core_ped_selected_samples) %>% 
          rename(V2 = aid_chris, 
                 HHID.V2 = HHID) %>% 
          select(V2, age, HHID.V2), 
        all.x = TRUE
        ) %>%
  merge(., meta(chrismb_phy_core_ped_selected_samples) %>% 
          rename(V1 = aid_chris, 
                 HHID.V1 = HHID,
                 sex.V1 = sex) %>% 
          select(V1, sex.V1, HHID.V1), 
        all.x = TRUE
        ) %>% 
  mutate(living_together = ifelse(HHID.V2 == HHID.V1, 
                            "yes",
                            "no")) %>% 
  merge(., beta_mtx_molten, by = c("V1", "V2"), all.x = TRUE) %>% 
  set_names(c("child", "mother", "age", "house_mother", "sex_child", "house_child", "living_together", "bray_value"))
              
              
head(wrangled_beta_values_mo_child_pairs)


ggplot(wrangled_beta_values_mo_child_pairs, aes(x = living_together, y = bray_value))+
  geom_violin(width = 0.6)+
  geom_boxplot(width = 0.2)+ 
  facet_wrap(~sex_child)+
  theme_light()+
  xlab("Cohabiting")+ 
  ylab("Bray-Curtis dissimilarity")+ 
  ggtitle("Mother-child pairs")

```

#### 1.4.2.2 - father-child

```{r}
# replace sample names of the distance matrix with CHRIS AIDs
distance_for_all_bray_mtx<- as.matrix(distance_for_all_bray)

aids_map <- read.table("~/CHRISMB/participants lists each study/michigan_chris_mapping.txt", 
                       header = TRUE, 
                       colClasses = "character"
                       ) %>% 
  set_names(c("aid_michigan","aid_chris")) %>% 
  filter(aid_michigan %in% colnames(distance_for_all_bray_mtx))

# match order or column and rownames of the matrix
aids_map <- aids_map[match(aids_map$aid_michigan,colnames(distance_for_all_bray_mtx)),]

#replace column and rownames or the distance matrix
if(identical(aids_map$aid_michigan, colnames(distance_for_all_bray_mtx))){
colnames(distance_for_all_bray_mtx) <- aids_map$aid_chris
rownames(distance_for_all_bray_mtx) <- aids_map$aid_chris
}else{
  stop("matching samples order didn't work")
}

# find child-father pairs
child_father_pairs <- child_father_pairs_ped(CHRISMB_only_pedigree %>% filter(id %in% chrismb_phy_core_ped_selected_samples@sam_data$aid_chris))

## some will probably be missing due to sample selection of the phyloseq object: remove them
child_father_pairs_effective_samp_size <- child_father_pairs[child_father_pairs[,1] %in% colnames(distance_for_all_bray_mtx) & child_father_pairs[,2] %in% colnames(distance_for_all_bray_mtx),]

dim(child_father_pairs_effective_samp_size)


# molten beta diversity useful for merging
beta_mtx_molten <- distance_for_all_bray_mtx %>% 
  reshape2::melt(as.is = TRUE, varnames = c("V1", "V2"), value.name = "bray_value")

# add household of column one and column two 
wrangled_beta_values_mo_child_pairs <- as.data.frame(child_father_pairs_effective_samp_size) %>% 
  merge(., meta(chrismb_phy_core_ped_selected_samples) %>% 
          rename(V2 = aid_chris, 
                 HHID.V2 = HHID) %>% 
          select(V2, age, HHID.V2), 
        all.x = TRUE
        ) %>%
  merge(., meta(chrismb_phy_core_ped_selected_samples) %>% 
          rename(V1 = aid_chris, 
                 HHID.V1 = HHID,
                 sex.V1 = sex) %>% 
          select(V1, sex.V1, HHID.V1), 
        all.x = TRUE
        ) %>% 
  mutate(living_together = ifelse(HHID.V2 == HHID.V1, 
                            "yes",
                            "no")) %>% 
  merge(., beta_mtx_molten, by = c("V1", "V2"), all.x = TRUE) %>% 
  set_names(c("child", "father", "age", "house_father", "sex_child", "house_child", "living_together", "bray_value"))
              
              
head(wrangled_beta_values_mo_child_pairs)


ggplot(wrangled_beta_values_mo_child_pairs, aes(x = living_together, y = bray_value))+
  geom_violin(width = 0.6)+
  geom_boxplot(width = 0.2)+ 
  facet_wrap(~sex_child)+
  theme_light()+
  xlab("Cohabiting")+ 
  ylab("Bray-Curtis dissimilarity")+ 
  ggtitle("Father-child pairs")


```


```{r}

```

## 1.4 - what's with weird people high different? (bray >= 0.8)

```{r}

distance_for_all_bray_mtx_upper <- dist_upper(distance_for_all_bray)


tmp <- distance_for_all_bray_mtx_upper %>%
  reshape2::melt() %>% 
  filter(value >= 0.8)

problematic_top10_guys <- table(c(tmp$Var1, tmp$Var2)) %>% 
  sort(decreasing = TRUE) %>% 
  .[1:10] %>% names()


chrismb_phy_core %>% 
  microbiome::transform("compositional") %>% 
  subset_samples(aid_michigan %in% problematic_top10_guys) %>% 
  meta() %>% 
  .$CST %>% 
  table()

```

All these guys are in community 5

```{r}
top10_distant_samples_barplot <- chrismb_phy_core %>% 
  microbiome::transform("compositional") %>% 
  subset_samples(aid_michigan %in% problematic_top10_guys) %>% 
  plot_bar2(fill = "Genus")+
  scale_fill_viridis_d()+ 
  labs(caption="")
  

plotly::ggplotly(top10_distant_samples_barplot)
```


```{r}

samples_divs_avg <- div_bray_all_mtrx %>% 
  rowSums(na.rm = TRUE) 
samples_divs_avg <- samples_divs_avg/nrow(div_bray_all_mtrx)

sort(samples_divs_avg, decreasing = TRUE)

```

# 2 - Family/Household beta diversity

  * **Study the microbiome similarity between families living together and families living apart**
  * **Study the microbiome in people living together and people not living together**
  
This last thing needs to be stratified

```{r, echo= FALSE}
tmp_mtx <- matrix(c("a", "b", "c", "d"), nrow = 2, ncol =2)

colnames(tmp_mtx) <- c("Same House", "Different House")
rownames(tmp_mtx) <- c("Same Family", "Different Family")

kableExtra::kbl(tmp_mtx) %>% kableExtra::kable_styling(bootstrap_options = c("bordered"))
```

In theory, I would expect that the degree of similarity should be **a > b > c > d**, since it is being increasingly shown that the environment plays a much bigger role in shaping the microbiome composition than relatedness. To study the pairwise similarities within these groups, I will need to extract people with particular information:

  * a = Households with n > 2 people and n = 1 family code --> compare within each of these microgroups of people
  * b = Households with n > 2 ppl and n > 1 family codes --> compare within household but between families 
  * c = In each family, individuals from different households  --> compare within family, but between households
  * d = From general dissimilarity/distance matrix, extract only values of comparisons between people not in the same household and not in the same family.


## 2.1 - Bray-Curtis 


```{r}
distance_for_all_bray <- phyloseq::distance(transform(chrismb_phy_core_ped_selected_samples, "compositional"), method = "bray")
```

### Case a: Same household and family

```{r}

cat("N° cases with individuals > 1: ")
# look at TRUE column
table(sort(table(CHRISMB_only_pedigree$HHID_fam), decreasing = TRUE) >= 2)/length(sort(table(CHRISMB_only_pedigree$HHID_fam), decreasing = TRUE))

```

A little more than 17 % of individuals are like we want (at least 2 people in the same family and household). Now calculate the between-within beta diversity boxplots of these people. We are interested in comparing values between different HHID and the same. And between same family and different ones.

```{r}

interesting_households <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$HHID

interesting_families <- 
  meta(chrismb_phy_core_ped_selected_samples) %>% group_by(fam) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$fam

case_a_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, (HHID %in% interesting_households) & (fam %in% interesting_families)) 

same_house_same_family <- beta_div_betw_withn(case_a_phy, 
                                     dist = distance_for_all_bray,
                                     variab = "HHID_fam")


######## save results into a list to make a final boxplot
all_comparisons_list <- list()
all_comparisons_list[[paste0("Same House\nSame Family\n(n = ", nsamples(case_a_phy), ")")]] <- unlist(same_house_same_family$within)


```

### Case b: same household, different family

```{r, message=FALSE}

# for each household, keep only those names where there is more than one family in it.
house_n_families_and_individuals <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  group_by(HHID) %>%
  summarise(HHID = HHID,
            n_families = dplyr::n_distinct(fam),
            n_individuals = n()
            ) %>%
  ungroup() %>%
  distinct()

case_b_houses_of_interest <- filter(house_n_families_and_individuals, n_families > 1 & n_individuals > 1) %>% .$HHID


# case_b_phy <-  microbiome::transform(subset_samples(chrismb_phy_core_ped, HHID %in% case_b_houses_of_interest), "compositional")

tot_n_samples_case_b <- 0

same_house_different_family <- list()

for(h in case_b_houses_of_interest){
  tmp_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, HHID == h)
  
  tot_n_samples_case_b <- tot_n_samples_case_b + nsamples(tmp_phy)
  
  same_house_different_family[[h]] <- 
    beta_div_betw_withn(tmp_phy, dist = distance_for_all_bray, variab = "fam", verbose = FALSE)
}

tmp <- purrr::transpose(same_house_different_family)$between

all_comparisons_list[[paste0("Same House\n Different Family\n(n = ", tot_n_samples_case_b, ")")]] <- unlist(tmp)

```

### Case c: Same family, diff. household

```{r, message = FALSE}

# for each family, keep only cases where there are more than 1 HHID 
case_c_fams_of_interest <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  count(fam, HHID) %>% 
  group_by(fam) %>%
  filter(n()>1)

tot_n_samples_case_c <- 0

diff_house_same_family <- list()

for(f in unique(case_c_fams_of_interest$fam)){
  
  tmp_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, fam == f)
  
  tot_n_samples_case_c <- tot_n_samples_case_c + nsamples(tmp_phy)
  
  diff_house_same_family[[f]] <- 
    beta_div_betw_withn(tmp_phy, dist = distance_for_all_bray, variab = "HHID", verbose = FALSE)
}

tot_n_samples_case_c

tmp <- purrr::transpose(diff_house_same_family)$between

all_comparisons_list[[paste0("Different House\nSame Family\n(n = ", tot_n_samples_case_c, ")")]] <- unlist(tmp)


```

### Case d: Different house, different family 

This can be obtained by case a, but taking between diversities instead of within. so just pick from it there

```{r}

interesting_households <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$HHID

interesting_families <- 
  meta(chrismb_phy_core_ped_selected_samples) %>% group_by(fam) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$fam

case_a_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, (HHID %in% interesting_households) & (fam %in% interesting_families)) 


same_house_same_family <- beta_div_betw_withn(case_a_phy, 
                                     dist = distance_for_all_bray,
                                     variab = "HHID_fam",
                                      verbose = FALSE)



all_comparisons_list[[paste0("Different House\nDifferent Family\n(n = ", nsamples(case_a_phy), ")")]] <- unlist(same_house_same_family$between)



```

### Plot of all 4 cases

```{r}

png("output_family_household/02_house_family_diversities_bray.png", height = 4, width = 8, res = 300, bg = "white", units = "in")

boxplot(all_comparisons_list, ylab="Bray-Curtis dissimilarity", col = "white")
#weird order, but you can play with this plot a bit more

# lapply(all_comparisons_list, function(v) data.frame(value = v)) %>% 
#   bind_rows(.id = "id") %>% 
#   ggplot(aes(x = id, y = value))+ 
#   geom_boxplot()+ 
#   xlab("")+
#   ylab("Bray-Curtis dissimilarity")+ 
#   theme_light()
  

dev.off()

open.plot.directory("output_family_household/02_house_family_diversities_bray.png")
```

## 2.2 - Jaccard 


```{r}
distance_for_all_jaccard <- phyloseq::distance(transform(chrismb_phy_core_ped_selected_samples, "compositional"), method = "jaccard")
```

### Case a: Same household and family

```{r}

cat("N° cases with individuals > 1: ")
# look at TRUE column
table(sort(table(CHRISMB_only_pedigree$HHID_fam), decreasing = TRUE) >= 2)/length(sort(table(CHRISMB_only_pedigree$HHID_fam), decreasing = TRUE))

```

A little more than 17 % of individuals are like we want (at least 2 people in the same family and household). Now calculate the between-within beta diversity boxplots of these people. We are interested in comparing values between different HHID and the same. And between same family and different ones.

```{r}

interesting_households <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$HHID

interesting_families <- 
  meta(chrismb_phy_core_ped_selected_samples) %>% group_by(fam) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$fam

case_a_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, (HHID %in% interesting_households) & (fam %in% interesting_families)) 

same_house_same_family <- beta_div_betw_withn(case_a_phy, 
                                     dist = distance_for_all_jaccard,
                                     variab = "HHID_fam")


######## save results into a list to make a final boxplot
all_comparisons_list <- list()
all_comparisons_list[[paste0("Same House\nSame Family\n(n = ", nsamples(case_a_phy), ")")]] <- unlist(same_house_same_family$within)


```

### Case b: same household, different family

```{r, message=FALSE}

# for each household, keep only those names where there is more than one family in it.
house_n_families_and_individuals <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  group_by(HHID) %>%
  summarise(HHID = HHID,
            n_families = dplyr::n_distinct(fam),
            n_individuals = n()
            ) %>%
  ungroup() %>%
  distinct()

case_b_houses_of_interest <- filter(house_n_families_and_individuals, n_families > 1 & n_individuals > 1) %>% .$HHID


# case_b_phy <-  microbiome::transform(subset_samples(chrismb_phy_core_ped, HHID %in% case_b_houses_of_interest), "compositional")

tot_n_samples_case_b <- 0

same_house_different_family <- list()

for(h in case_b_houses_of_interest){
  tmp_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, HHID == h)
  
  tot_n_samples_case_b <- tot_n_samples_case_b + nsamples(tmp_phy)
  
  same_house_different_family[[h]] <- 
    beta_div_betw_withn(tmp_phy, dist = distance_for_all_jaccard, variab = "fam", verbose = FALSE)
}

tmp <- purrr::transpose(same_house_different_family)$between

all_comparisons_list[[paste0("Same House\n Different Family\n(n = ", tot_n_samples_case_b, ")")]] <- unlist(tmp)

```

### Case c: Same family, diff. household

```{r, message = FALSE}

# for each family, keep only cases where there are more than 1 HHID 
case_c_fams_of_interest <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  count(fam, HHID) %>% 
  group_by(fam) %>%
  filter(n()>1)

tot_n_samples_case_c <- 0

diff_house_same_family <- list()

for(f in unique(case_c_fams_of_interest$fam)){
  
  tmp_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, fam == f)
  
  tot_n_samples_case_c <- tot_n_samples_case_c + nsamples(tmp_phy)
  
  diff_house_same_family[[f]] <- 
    beta_div_betw_withn(tmp_phy, dist = distance_for_all_jaccard, variab = "HHID", verbose = FALSE)
}

tot_n_samples_case_c

tmp <- purrr::transpose(diff_house_same_family)$between

all_comparisons_list[[paste0("Different House\nSame Family\n(n = ", tot_n_samples_case_c, ")")]] <- unlist(tmp)


```

### Case d: Different house, different family 

This can be obtained by case a, but taking between diversities instead of within. so just pick from it there

```{r}

interesting_households <- meta(chrismb_phy_core_ped_selected_samples) %>% 
  group_by(HHID) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$HHID

interesting_families <- 
  meta(chrismb_phy_core_ped_selected_samples) %>% group_by(fam) %>% 
  tally() %>% 
  filter(n >= 2) %>% 
  .$fam

case_a_phy <- subset_samples(chrismb_phy_core_ped_selected_samples, (HHID %in% interesting_households) & (fam %in% interesting_families)) 


same_house_same_family <- beta_div_betw_withn(case_a_phy, 
                                     dist = distance_for_all_jaccard,
                                     variab = "HHID_fam",
                                      verbose = FALSE)



all_comparisons_list[[paste0("Different House\nDifferent Family\n(n = ", nsamples(case_a_phy), ")")]] <- unlist(same_house_same_family$between)



```

### Plot of all 4 cases

```{r}

png("output_family_household/02_house_family_diversities_jaccard.png", height = 4, width = 8, res = 300, bg = "white", units = "in")

boxplot(all_comparisons_list, ylab="Jaccard dissimilarity", col = "white")
#weird order, but you can play with this plot a bit more

# lapply(all_comparisons_list, function(v) data.frame(value = v)) %>% 
#   bind_rows(.id = "id") %>% 
#   ggplot(aes(x = id, y = value))+ 
#   geom_boxplot()+ 
#   xlab("")+
#   ylab("jaccard-Curtis dissimilarity")+ 
#   theme_light()
  

dev.off()

open.plot.directory("output_family_household/02_house_family_diversities_jaccard.png")
```


Unfortunately, plotting boxplots doesn't show much of the role of age in the dissimilarity of the microbiota. An approach we can use is to find the proportion of variance explained by households, families and the first 10 genetic PCs. 


# 4 - PERMANOVA with genetic PCs

```{r}
# get pedigree
CHRISMB_pedigree_extended <- read.csv("~/CHRISMB/saliva_genetics/heritability/SOLAR_heritability/heritability_directory_setups/pedigree/pedigree_SOLAR_house_location.ped", colClasses = "character")

# library(kinship2)

# 1 - subset CHRISMB only participants
CHRISMB_only_pedigree <- filter(CHRISMB_pedigree_extended, id %in% chrismb_aids)
# fix the HHID = "" problems
CHRISMB_only_pedigree$HHID <- ifelse(CHRISMB_only_pedigree$HHID == "", "unknown", CHRISMB_only_pedigree$HHID)
CHRISMB_only_pedigree$HHID <- ifelse(CHRISMB_only_pedigree$HHID == "unknown", make.unique(CHRISMB_only_pedigree$HHID), CHRISMB_only_pedigree$HHID)

# 2 - make family name
CHRISMB_only_pedigree$fam <- as.character(kinship2::makefamid(id = CHRISMB_only_pedigree$id, mother.id = CHRISMB_only_pedigree$mo, father.id = CHRISMB_only_pedigree$fa))
# 2.1 - fix the 0 problem, that are singletons. rename them as unique
CHRISMB_only_pedigree$fam <- ifelse(CHRISMB_only_pedigree$fam == "0", make.unique(CHRISMB_only_pedigree$fam),CHRISMB_only_pedigree$fam) 

# 3 - fix parents in "id", only necessary if you want to plot. NB: don't do this before step 2, because the resulting family will be fully "artificially" connected
# CHRISMB_only_pedigree_fixed <- kinship2::fixParents(id = CHRISMB_only_pedigree$id, dadid = CHRISMB_only_pedigree$fa, momid = CHRISMB_only_pedigree$mo, sex = as.integer(CHRISMB_only_pedigree$sex)) 
# important: so far i didn't make it work...

# get phyloseq object 
chrismb_phy_ped <- add_meta_variables(physeq = chrismb_phy, df = select(CHRISMB_only_pedigree, -fa, -mo) %>% dplyr::rename(aid_chris = id), by = "aid_chris")

## subset only those samples you are interested in, that are non-missing ones and those not taking antibiotics

chrismb_phy_ped_selected_samples <- drop_NA_from_phyloseq_vars(chrismb_phy_ped, c("HHID", "fam", "how_many_teeth", "smoking_exposure_ga", "municipality")) %>% subset_samples(used_antibiotics_last_3_months == "no")

# get genetic PCs
genetic_pc_CHRIS13k <- read.table("/shared/statgen/CHRIS13K/CHRIS13K.GT.evecs", header = FALSE, colClasses = c("character", rep("numeric", 10))) %>% 
  set_names(c("aid_chris", paste0("PC", 1:10)))

genetic_pc_CHRISMB <-  filter(genetic_pc_CHRIS13k, aid_chris %in% chrismb_phy_ped_selected_samples@sam_data$aid_chris)

chrismb_phy_ped_selected_samples_geneticPCs <- subset_samples(chrismb_phy_ped_selected_samples, aid_chris %in% genetic_pc_CHRISMB$aid_chris) %>% 
  add_meta_variables(genetic_pc_CHRISMB, by="aid_chris")

# calculate beta diversity
distance_jaccard <- phyloseq::distance(chrismb_phy_ped_selected_samples_geneticPCs, method = "jaccard")

# make a common permanova variable
formula_permanova <- formula(paste("distance_jaccard ~ age", "sex.x", "HHID", paste("PC", 1:10, sep = "", collapse = "+"), sep = "+"))

# PERMANOVA of these variables
permanova_genetics <- vegan::adonis2(formula = formula_permanova,by = "margin", data = meta(chrismb_phy_ped_selected_samples_geneticPCs),parallel = 30)

```


# 5 Heritability analysis

## genus level, house = location
```{r}
heritability_solar <- read.csv("heritability/SOLAR_heritability/clean_data_ga/house=location/cov=sex, age, smoking_RM/house=loc,covs=age,sex,smoking_rm.csv", row.names = 1)

pedigre_associated_taxa <- heritability_solar %>% 
  mutate(padj.h2 = p.adjust(pval.h2, method = "BH"),
         padj.c2 = p.adjust(pval.c2, method = "BH")) %>% 
  filter(padj.h2 <= 0.1 & h2ped != 0)

h2_c2_plot_signif <- pivot_longer(pedigre_associated_taxa, cols = c("h2ped", "c2")) %>% 
ggplot(mapping = aes(x = reorder(genus,-value), y = value, fill = name))+
  geom_bar(stat="identity")+
  theme_light()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+ 
  #gghighlight::gghighlight(padj.c2 < 0.1, keep_scales = TRUE)+
  geom_hline(yintercept = 0.2, lty = "dashed", color = "black")+
  scale_fill_discrete(name = "Estimates", labels = c("Household", "h² (pedigree)"), type = ggsci::pal_jco()(2)) +
  ylab("estimate")+
  xlab("Genus")


ggsave(plot = h2_c2_plot_signif, filename = "output_family_household/05_heritability_HHID_loc_signif_genera.png",
       height = 6,
       width = 9,
       dpi = 300)
       

h2_c2_plot_signif

```

# Role of age in findings above
One of the covariates that people claim to be important in shaping the microbiome (oral or not) is age. To strengthen our results we might stratify by age category. example: repeat household effect for each age category

# Beta diversity - effect of subsampling

Objective: test whether the beta diversity estimates vary in relation to the subsetting. for this let's pick 10 pairs of values and se how they differ from an overall subset and subsetting only a few of them. 

Conclusion: there is no difference. This confirms my code before.

```{r}

samp_names <- sample(sample_names(chrismb_phy_core), 10)

pairs <- combn(samp_names,m = 2) %>% 
  t() %>% 
  as.data.frame()

beta_all <- distance(microbiome::transform(chrismb_phy_core, "compositional"), distance_for_all) %>% 
  as.matrix()


for(i in 1:nrow(pairs)){
  pairs[i, "beta_values_all"] <- beta_all[pairs[i,"V1"], pairs[i,"V2"]]
}

############# subset #############

tmp_phy <- subset_samples(physeq = chrismb_phy_core, sample_names(chrismb_phy_core) %in% samp_names)

beta_subs <-  distance(microbiome::transform(tmp_phy, "compositional"), distance_for_all) %>% 
  as.matrix()

for(i in 1:nrow(pairs)){
  pairs[i, "beta_values_subs"] <- beta_subs[pairs[i,"V1"], pairs[i,"V2"]]
}


plot((pairs$beta_values_all - pairs$beta_values_subs)^2)
abline(h = 0, col = "red")


```

